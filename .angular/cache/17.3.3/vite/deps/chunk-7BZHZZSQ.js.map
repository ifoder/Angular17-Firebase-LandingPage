{
  "version": 3,
  "sources": ["../../../../../node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-core-time.mjs"],
  "sourcesContent": ["import { startOfWeek, startOfMonth, setYear, addYears, setMonth, addMonths, setDay, isSameDay, isSameSecond, isSameMinute, isSameHour, isSameMonth, isSameYear, differenceInCalendarDays, differenceInSeconds, differenceInMinutes, differenceInHours, differenceInCalendarMonths, differenceInCalendarYears, isToday, isValid, isFirstDayOfMonth, isLastDayOfMonth } from 'date-fns';\nimport { warn } from 'ng-zorro-antd/core/logger';\nimport { getLocaleDayPeriods, FormStyle, TranslationWidth } from '@angular/common';\nimport { isNotNil } from 'ng-zorro-antd/core/util';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nfunction wrongSortOrder(rangeValue) {\n    const [start, end] = rangeValue;\n    return !!start && !!end && end.isBeforeDay(start);\n}\nfunction normalizeRangeValue(value, hasTimePicker, type = 'month', activePart = 'left') {\n    const [start, end] = value;\n    let newStart = start || new CandyDate();\n    let newEnd = end || (hasTimePicker ? newStart : newStart.add(1, type));\n    if (start && !end) {\n        newStart = start;\n        newEnd = hasTimePicker ? start : start.add(1, type);\n    }\n    else if (!start && end) {\n        newStart = hasTimePicker ? end : end.add(-1, type);\n        newEnd = end;\n    }\n    else if (start && end && !hasTimePicker) {\n        if (start.isSame(end, type)) {\n            newEnd = newStart.add(1, type);\n        }\n        else {\n            if (activePart === 'left') {\n                newEnd = newStart.add(1, type);\n            }\n            else {\n                newStart = newEnd.add(-1, type);\n            }\n        }\n    }\n    return [newStart, newEnd];\n}\nfunction cloneDate(value) {\n    if (Array.isArray(value)) {\n        return value.map(v => (v instanceof CandyDate ? v.clone() : null));\n    }\n    else {\n        return value instanceof CandyDate ? value.clone() : null;\n    }\n}\n/**\n * Wrapping kind APIs for date operating and unify\n * NOTE: every new API return new CandyDate object without side effects to the former Date object\n * NOTE: most APIs are based on local time other than customized locale id (this needs tobe support in future)\n * TODO: support format() against to angular's core API\n */\nclass CandyDate {\n    // locale: string; // Custom specified locale ID\n    constructor(date) {\n        if (date) {\n            if (date instanceof Date) {\n                this.nativeDate = date;\n            }\n            else if (typeof date === 'string' || typeof date === 'number') {\n                warn('The string type is not recommended for date-picker, use \"Date\" type');\n                this.nativeDate = new Date(date);\n            }\n            else {\n                throw new Error('The input date type is not supported (\"Date\" is now recommended)');\n            }\n        }\n        else {\n            this.nativeDate = new Date();\n        }\n    }\n    calendarStart(options) {\n        return new CandyDate(startOfWeek(startOfMonth(this.nativeDate), options));\n    }\n    // ---------------------------------------------------------------------\n    // | Native shortcuts\n    // -----------------------------------------------------------------------------\\\n    getYear() {\n        return this.nativeDate.getFullYear();\n    }\n    getMonth() {\n        return this.nativeDate.getMonth();\n    }\n    getDay() {\n        return this.nativeDate.getDay();\n    }\n    getTime() {\n        return this.nativeDate.getTime();\n    }\n    getDate() {\n        return this.nativeDate.getDate();\n    }\n    getHours() {\n        return this.nativeDate.getHours();\n    }\n    getMinutes() {\n        return this.nativeDate.getMinutes();\n    }\n    getSeconds() {\n        return this.nativeDate.getSeconds();\n    }\n    getMilliseconds() {\n        return this.nativeDate.getMilliseconds();\n    }\n    // ---------------------------------------------------------------------\n    // | New implementing APIs\n    // ---------------------------------------------------------------------\n    clone() {\n        return new CandyDate(new Date(this.nativeDate));\n    }\n    setHms(hour, minute, second) {\n        const newDate = new Date(this.nativeDate.setHours(hour, minute, second));\n        return new CandyDate(newDate);\n    }\n    setYear(year) {\n        return new CandyDate(setYear(this.nativeDate, year));\n    }\n    addYears(amount) {\n        return new CandyDate(addYears(this.nativeDate, amount));\n    }\n    // NOTE: month starts from 0\n    // NOTE: Don't use the native API for month manipulation as it not restrict the date when it overflows, eg. (new Date('2018-7-31')).setMonth(1) will be date of 2018-3-03 instead of 2018-2-28\n    setMonth(month) {\n        return new CandyDate(setMonth(this.nativeDate, month));\n    }\n    addMonths(amount) {\n        return new CandyDate(addMonths(this.nativeDate, amount));\n    }\n    setDay(day, options) {\n        return new CandyDate(setDay(this.nativeDate, day, options));\n    }\n    setDate(amount) {\n        const date = new Date(this.nativeDate);\n        date.setDate(amount);\n        return new CandyDate(date);\n    }\n    addDays(amount) {\n        return this.setDate(this.getDate() + amount);\n    }\n    add(amount, mode) {\n        switch (mode) {\n            case 'decade':\n                return this.addYears(amount * 10);\n            case 'year':\n                return this.addYears(amount);\n            case 'month':\n                return this.addMonths(amount);\n            default:\n                return this.addMonths(amount);\n        }\n    }\n    isSame(date, grain = 'day') {\n        let fn;\n        switch (grain) {\n            case 'decade':\n                fn = (pre, next) => Math.abs(pre.getFullYear() - next.getFullYear()) < 11;\n                break;\n            case 'year':\n                fn = isSameYear;\n                break;\n            case 'month':\n                fn = isSameMonth;\n                break;\n            case 'day':\n                fn = isSameDay;\n                break;\n            case 'hour':\n                fn = isSameHour;\n                break;\n            case 'minute':\n                fn = isSameMinute;\n                break;\n            case 'second':\n                fn = isSameSecond;\n                break;\n            default:\n                fn = isSameDay;\n                break;\n        }\n        return fn(this.nativeDate, this.toNativeDate(date));\n    }\n    isSameYear(date) {\n        return this.isSame(date, 'year');\n    }\n    isSameMonth(date) {\n        return this.isSame(date, 'month');\n    }\n    isSameDay(date) {\n        return this.isSame(date, 'day');\n    }\n    isSameHour(date) {\n        return this.isSame(date, 'hour');\n    }\n    isSameMinute(date) {\n        return this.isSame(date, 'minute');\n    }\n    isSameSecond(date) {\n        return this.isSame(date, 'second');\n    }\n    isBefore(date, grain = 'day') {\n        if (date === null) {\n            return false;\n        }\n        let fn;\n        switch (grain) {\n            case 'year':\n                fn = differenceInCalendarYears;\n                break;\n            case 'month':\n                fn = differenceInCalendarMonths;\n                break;\n            case 'day':\n                fn = differenceInCalendarDays;\n                break;\n            case 'hour':\n                fn = differenceInHours;\n                break;\n            case 'minute':\n                fn = differenceInMinutes;\n                break;\n            case 'second':\n                fn = differenceInSeconds;\n                break;\n            default:\n                fn = differenceInCalendarDays;\n                break;\n        }\n        return fn(this.nativeDate, this.toNativeDate(date)) < 0;\n    }\n    isBeforeYear(date) {\n        return this.isBefore(date, 'year');\n    }\n    isBeforeMonth(date) {\n        return this.isBefore(date, 'month');\n    }\n    isBeforeDay(date) {\n        return this.isBefore(date, 'day');\n    }\n    // Equal to today accurate to \"day\"\n    isToday() {\n        return isToday(this.nativeDate);\n    }\n    isValid() {\n        return isValid(this.nativeDate);\n    }\n    isFirstDayOfMonth() {\n        return isFirstDayOfMonth(this.nativeDate);\n    }\n    isLastDayOfMonth() {\n        return isLastDayOfMonth(this.nativeDate);\n    }\n    toNativeDate(date) {\n        return date instanceof CandyDate ? date.nativeDate : date;\n    }\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst timeUnits = [\n    ['Y', 1000 * 60 * 60 * 24 * 365], // years\n    ['M', 1000 * 60 * 60 * 24 * 30], // months\n    ['D', 1000 * 60 * 60 * 24], // days\n    ['H', 1000 * 60 * 60], // hours\n    ['m', 1000 * 60], // minutes\n    ['s', 1000], // seconds\n    ['S', 1] // million seconds\n];\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n// from https://github.com/hsuanxyz/ng-time-parser\nclass NgTimeParser {\n    constructor(format, localeId) {\n        this.format = format;\n        this.localeId = localeId;\n        this.regex = null;\n        this.matchMap = {\n            hour: null,\n            minute: null,\n            second: null,\n            periodNarrow: null,\n            periodWide: null,\n            periodAbbreviated: null\n        };\n        this.genRegexp();\n    }\n    toDate(str) {\n        const result = this.getTimeResult(str);\n        const time = new Date();\n        if (isNotNil(result?.hour)) {\n            time.setHours(result.hour);\n        }\n        if (isNotNil(result?.minute)) {\n            time.setMinutes(result.minute);\n        }\n        if (isNotNil(result?.second)) {\n            time.setSeconds(result.second);\n        }\n        if (result?.period === 1 && time.getHours() < 12) {\n            time.setHours(time.getHours() + 12);\n        }\n        return time;\n    }\n    getTimeResult(str) {\n        const match = this.regex.exec(str);\n        let period = null;\n        if (match) {\n            if (isNotNil(this.matchMap.periodNarrow)) {\n                period = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Narrow).indexOf(match[this.matchMap.periodNarrow + 1]);\n            }\n            if (isNotNil(this.matchMap.periodWide)) {\n                period = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Wide).indexOf(match[this.matchMap.periodWide + 1]);\n            }\n            if (isNotNil(this.matchMap.periodAbbreviated)) {\n                period = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Abbreviated).indexOf(match[this.matchMap.periodAbbreviated + 1]);\n            }\n            return {\n                hour: isNotNil(this.matchMap.hour) ? Number.parseInt(match[this.matchMap.hour + 1], 10) : null,\n                minute: isNotNil(this.matchMap.minute) ? Number.parseInt(match[this.matchMap.minute + 1], 10) : null,\n                second: isNotNil(this.matchMap.second) ? Number.parseInt(match[this.matchMap.second + 1], 10) : null,\n                period\n            };\n        }\n        else {\n            return null;\n        }\n    }\n    genRegexp() {\n        let regexStr = this.format.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$&');\n        const hourRegex = /h{1,2}/i;\n        const minuteRegex = /m{1,2}/;\n        const secondRegex = /s{1,2}/;\n        const periodNarrow = /aaaaa/;\n        const periodWide = /aaaa/;\n        const periodAbbreviated = /a{1,3}/;\n        const hourMatch = hourRegex.exec(this.format);\n        const minuteMatch = minuteRegex.exec(this.format);\n        const secondMatch = secondRegex.exec(this.format);\n        const periodNarrowMatch = periodNarrow.exec(this.format);\n        let periodWideMatch = null;\n        let periodAbbreviatedMatch = null;\n        if (!periodNarrowMatch) {\n            periodWideMatch = periodWide.exec(this.format);\n        }\n        if (!periodWideMatch && !periodNarrowMatch) {\n            periodAbbreviatedMatch = periodAbbreviated.exec(this.format);\n        }\n        const matchs = [hourMatch, minuteMatch, secondMatch, periodNarrowMatch, periodWideMatch, periodAbbreviatedMatch]\n            .filter(m => !!m)\n            .sort((a, b) => a.index - b.index);\n        matchs.forEach((match, index) => {\n            switch (match) {\n                case hourMatch:\n                    this.matchMap.hour = index;\n                    regexStr = regexStr.replace(hourRegex, '(\\\\d{1,2})');\n                    break;\n                case minuteMatch:\n                    this.matchMap.minute = index;\n                    regexStr = regexStr.replace(minuteRegex, '(\\\\d{1,2})');\n                    break;\n                case secondMatch:\n                    this.matchMap.second = index;\n                    regexStr = regexStr.replace(secondRegex, '(\\\\d{1,2})');\n                    break;\n                case periodNarrowMatch:\n                    this.matchMap.periodNarrow = index;\n                    const periodsNarrow = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Narrow).join('|');\n                    regexStr = regexStr.replace(periodNarrow, `(${periodsNarrow})`);\n                    break;\n                case periodWideMatch:\n                    this.matchMap.periodWide = index;\n                    const periodsWide = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Wide).join('|');\n                    regexStr = regexStr.replace(periodWide, `(${periodsWide})`);\n                    break;\n                case periodAbbreviatedMatch:\n                    this.matchMap.periodAbbreviated = index;\n                    const periodsAbbreviated = getLocaleDayPeriods(this.localeId, FormStyle.Format, TranslationWidth.Abbreviated).join('|');\n                    regexStr = regexStr.replace(periodAbbreviated, `(${periodsAbbreviated})`);\n                    break;\n            }\n        });\n        this.regex = new RegExp(regexStr);\n    }\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CandyDate, cloneDate, normalizeRangeValue, timeUnits, wrongSortOrder, NgTimeParser as ɵNgTimeParser };\n\n"],
  "mappings": "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",
  "names": []
}
