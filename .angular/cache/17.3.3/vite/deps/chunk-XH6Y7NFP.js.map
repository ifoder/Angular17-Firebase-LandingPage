{
  "version": 3,
  "sources": ["../../../../../node_modules/@firebase/firestore-compat/dist/index.esm2017.js"],
  "sourcesContent": ["import firebase from '@firebase/app-compat';\nimport { FirestoreError, Bytes, _isBase64Available, enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence, clearIndexedDbPersistence, _DatabaseId, _logWarn, connectFirestoreEmulator, enableNetwork, disableNetwork, _validateIsNotUsedTogether, waitForPendingWrites, onSnapshotsInSync, collection, doc, collectionGroup, runTransaction, ensureFirestoreConfigured, WriteBatch as WriteBatch$1, executeWrite, loadBundle, namedQuery, DocumentSnapshot as DocumentSnapshot$1, DocumentReference as DocumentReference$1, _DocumentKey, refEqual, setDoc, updateDoc, deleteDoc, onSnapshot, getDocFromCache, getDocFromServer, getDoc, snapshotEqual, query, where, orderBy, limit, limitToLast, startAt, startAfter, endBefore, endAt, queryEqual, getDocsFromCache, getDocsFromServer, getDocs, QuerySnapshot as QuerySnapshot$1, addDoc, _cast, AbstractUserDataWriter, setLogLevel as setLogLevel$1, QueryDocumentSnapshot as QueryDocumentSnapshot$1, _debugAssert, FieldPath as FieldPath$1, _FieldPath, serverTimestamp, deleteField, arrayUnion, arrayRemove, increment, GeoPoint, Timestamp, CACHE_SIZE_UNLIMITED } from '@firebase/firestore';\nimport { getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\nconst name = \"@firebase/firestore-compat\";\nconst version = \"0.3.28\";\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction validateSetOptions(methodName, options) {\r\n    if (options === undefined) {\r\n        return {\r\n            merge: false\r\n        };\r\n    }\r\n    if (options.mergeFields !== undefined && options.merge !== undefined) {\r\n        throw new FirestoreError('invalid-argument', `Invalid options passed to function ${methodName}(): You cannot ` +\r\n            'specify both \"merge\" and \"mergeFields\".');\r\n    }\r\n    return options;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Helper function to assert Uint8Array is available at runtime. */\r\nfunction assertUint8ArrayAvailable() {\r\n    if (typeof Uint8Array === 'undefined') {\r\n        throw new FirestoreError('unimplemented', 'Uint8Arrays are not available in this environment.');\r\n    }\r\n}\r\n/** Helper function to assert Base64 functions are available at runtime. */\r\nfunction assertBase64Available() {\r\n    if (!_isBase64Available()) {\r\n        throw new FirestoreError('unimplemented', 'Blobs are unavailable in Firestore in this environment.');\r\n    }\r\n}\r\n/** Immutable class holding a blob (binary data) */\r\nclass Blob {\r\n    constructor(_delegate) {\r\n        this._delegate = _delegate;\r\n    }\r\n    static fromBase64String(base64) {\r\n        assertBase64Available();\r\n        return new Blob(Bytes.fromBase64String(base64));\r\n    }\r\n    static fromUint8Array(array) {\r\n        assertUint8ArrayAvailable();\r\n        return new Blob(Bytes.fromUint8Array(array));\r\n    }\r\n    toBase64() {\r\n        assertBase64Available();\r\n        return this._delegate.toBase64();\r\n    }\r\n    toUint8Array() {\r\n        assertUint8ArrayAvailable();\r\n        return this._delegate.toUint8Array();\r\n    }\r\n    isEqual(other) {\r\n        return this._delegate.isEqual(other._delegate);\r\n    }\r\n    toString() {\r\n        return 'Blob(base64: ' + this.toBase64() + ')';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isPartialObserver(obj) {\r\n    return implementsAnyMethods(obj, ['next', 'error', 'complete']);\r\n}\r\n/**\r\n * Returns true if obj is an object and contains at least one of the specified\r\n * methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    const object = obj;\r\n    for (const method of methods) {\r\n        if (method in object && typeof object[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The persistence provider included with the full Firestore SDK.\r\n */\r\nclass IndexedDbPersistenceProvider {\r\n    enableIndexedDbPersistence(firestore, forceOwnership) {\r\n        return enableIndexedDbPersistence(firestore._delegate, { forceOwnership });\r\n    }\r\n    enableMultiTabIndexedDbPersistence(firestore) {\r\n        return enableMultiTabIndexedDbPersistence(firestore._delegate);\r\n    }\r\n    clearIndexedDbPersistence(firestore) {\r\n        return clearIndexedDbPersistence(firestore._delegate);\r\n    }\r\n}\r\n/**\r\n * Compat class for Firestore. Exposes Firestore Legacy API, but delegates\r\n * to the functional API of firestore-exp.\r\n */\r\nclass Firestore {\r\n    constructor(databaseIdOrApp, _delegate, _persistenceProvider) {\r\n        this._delegate = _delegate;\r\n        this._persistenceProvider = _persistenceProvider;\r\n        this.INTERNAL = {\r\n            delete: () => this.terminate()\r\n        };\r\n        if (!(databaseIdOrApp instanceof _DatabaseId)) {\r\n            this._appCompat = databaseIdOrApp;\r\n        }\r\n    }\r\n    get _databaseId() {\r\n        return this._delegate._databaseId;\r\n    }\r\n    settings(settingsLiteral) {\r\n        const currentSettings = this._delegate._getSettings();\r\n        if (!settingsLiteral.merge &&\r\n            currentSettings.host !== settingsLiteral.host) {\r\n            _logWarn('You are overriding the original host. If you did not intend ' +\r\n                'to override your settings, use {merge: true}.');\r\n        }\r\n        if (settingsLiteral.merge) {\r\n            settingsLiteral = Object.assign(Object.assign({}, currentSettings), settingsLiteral);\r\n            // Remove the property from the settings once the merge is completed\r\n            delete settingsLiteral.merge;\r\n        }\r\n        this._delegate._setSettings(settingsLiteral);\r\n    }\r\n    useEmulator(host, port, options = {}) {\r\n        connectFirestoreEmulator(this._delegate, host, port, options);\r\n    }\r\n    enableNetwork() {\r\n        return enableNetwork(this._delegate);\r\n    }\r\n    disableNetwork() {\r\n        return disableNetwork(this._delegate);\r\n    }\r\n    enablePersistence(settings) {\r\n        let synchronizeTabs = false;\r\n        let experimentalForceOwningTab = false;\r\n        if (settings) {\r\n            synchronizeTabs = !!settings.synchronizeTabs;\r\n            experimentalForceOwningTab = !!settings.experimentalForceOwningTab;\r\n            _validateIsNotUsedTogether('synchronizeTabs', synchronizeTabs, 'experimentalForceOwningTab', experimentalForceOwningTab);\r\n        }\r\n        return synchronizeTabs\r\n            ? this._persistenceProvider.enableMultiTabIndexedDbPersistence(this)\r\n            : this._persistenceProvider.enableIndexedDbPersistence(this, experimentalForceOwningTab);\r\n    }\r\n    clearPersistence() {\r\n        return this._persistenceProvider.clearIndexedDbPersistence(this);\r\n    }\r\n    terminate() {\r\n        if (this._appCompat) {\r\n            this._appCompat._removeServiceInstance('firestore-compat');\r\n            this._appCompat._removeServiceInstance('firestore');\r\n        }\r\n        return this._delegate._delete();\r\n    }\r\n    waitForPendingWrites() {\r\n        return waitForPendingWrites(this._delegate);\r\n    }\r\n    onSnapshotsInSync(arg) {\r\n        return onSnapshotsInSync(this._delegate, arg);\r\n    }\r\n    get app() {\r\n        if (!this._appCompat) {\r\n            throw new FirestoreError('failed-precondition', \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\r\n                'not available');\r\n        }\r\n        return this._appCompat;\r\n    }\r\n    collection(pathString) {\r\n        try {\r\n            return new CollectionReference(this, collection(this._delegate, pathString));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'collection()', 'Firestore.collection()');\r\n        }\r\n    }\r\n    doc(pathString) {\r\n        try {\r\n            return new DocumentReference(this, doc(this._delegate, pathString));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'doc()', 'Firestore.doc()');\r\n        }\r\n    }\r\n    collectionGroup(collectionId) {\r\n        try {\r\n            return new Query(this, collectionGroup(this._delegate, collectionId));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'collectionGroup()', 'Firestore.collectionGroup()');\r\n        }\r\n    }\r\n    runTransaction(updateFunction) {\r\n        return runTransaction(this._delegate, transaction => updateFunction(new Transaction(this, transaction)));\r\n    }\r\n    batch() {\r\n        ensureFirestoreConfigured(this._delegate);\r\n        return new WriteBatch(new WriteBatch$1(this._delegate, mutations => executeWrite(this._delegate, mutations)));\r\n    }\r\n    loadBundle(bundleData) {\r\n        return loadBundle(this._delegate, bundleData);\r\n    }\r\n    namedQuery(name) {\r\n        return namedQuery(this._delegate, name).then(expQuery => {\r\n            if (!expQuery) {\r\n                return null;\r\n            }\r\n            return new Query(this, \r\n            // We can pass `expQuery` here directly since named queries don't have a UserDataConverter.\r\n            // Otherwise, we would have to create a new ExpQuery and pass the old UserDataConverter.\r\n            expQuery);\r\n        });\r\n    }\r\n}\r\nclass UserDataWriter extends AbstractUserDataWriter {\r\n    constructor(firestore) {\r\n        super();\r\n        this.firestore = firestore;\r\n    }\r\n    convertBytes(bytes) {\r\n        return new Blob(new Bytes(bytes));\r\n    }\r\n    convertReference(name) {\r\n        const key = this.convertDocumentKey(name, this.firestore._databaseId);\r\n        return DocumentReference.forKey(key, this.firestore, /* converter= */ null);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    setLogLevel$1(level);\r\n}\r\n/**\r\n * A reference to a transaction.\r\n */\r\nclass Transaction {\r\n    constructor(_firestore, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._delegate = _delegate;\r\n        this._userDataWriter = new UserDataWriter(_firestore);\r\n    }\r\n    get(documentRef) {\r\n        const ref = castReference(documentRef);\r\n        return this._delegate\r\n            .get(ref)\r\n            .then(result => new DocumentSnapshot(this._firestore, new DocumentSnapshot$1(this._firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, ref.converter)));\r\n    }\r\n    set(documentRef, data, options) {\r\n        const ref = castReference(documentRef);\r\n        if (options) {\r\n            validateSetOptions('Transaction.set', options);\r\n            this._delegate.set(ref, data, options);\r\n        }\r\n        else {\r\n            this._delegate.set(ref, data);\r\n        }\r\n        return this;\r\n    }\r\n    update(documentRef, dataOrField, value, ...moreFieldsAndValues) {\r\n        const ref = castReference(documentRef);\r\n        if (arguments.length === 2) {\r\n            this._delegate.update(ref, dataOrField);\r\n        }\r\n        else {\r\n            this._delegate.update(ref, dataOrField, value, ...moreFieldsAndValues);\r\n        }\r\n        return this;\r\n    }\r\n    delete(documentRef) {\r\n        const ref = castReference(documentRef);\r\n        this._delegate.delete(ref);\r\n        return this;\r\n    }\r\n}\r\nclass WriteBatch {\r\n    constructor(_delegate) {\r\n        this._delegate = _delegate;\r\n    }\r\n    set(documentRef, data, options) {\r\n        const ref = castReference(documentRef);\r\n        if (options) {\r\n            validateSetOptions('WriteBatch.set', options);\r\n            this._delegate.set(ref, data, options);\r\n        }\r\n        else {\r\n            this._delegate.set(ref, data);\r\n        }\r\n        return this;\r\n    }\r\n    update(documentRef, dataOrField, value, ...moreFieldsAndValues) {\r\n        const ref = castReference(documentRef);\r\n        if (arguments.length === 2) {\r\n            this._delegate.update(ref, dataOrField);\r\n        }\r\n        else {\r\n            this._delegate.update(ref, dataOrField, value, ...moreFieldsAndValues);\r\n        }\r\n        return this;\r\n    }\r\n    delete(documentRef) {\r\n        const ref = castReference(documentRef);\r\n        this._delegate.delete(ref);\r\n        return this;\r\n    }\r\n    commit() {\r\n        return this._delegate.commit();\r\n    }\r\n}\r\n/**\r\n * Wraps a `PublicFirestoreDataConverter` translating the types from the\r\n * experimental SDK into corresponding types from the Classic SDK before passing\r\n * them to the wrapped converter.\r\n */\r\nclass FirestoreDataConverter {\r\n    constructor(_firestore, _userDataWriter, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._userDataWriter = _userDataWriter;\r\n        this._delegate = _delegate;\r\n    }\r\n    fromFirestore(snapshot, options) {\r\n        const expSnapshot = new QueryDocumentSnapshot$1(this._firestore._delegate, this._userDataWriter, snapshot._key, snapshot._document, snapshot.metadata, \r\n        /* converter= */ null);\r\n        return this._delegate.fromFirestore(new QueryDocumentSnapshot(this._firestore, expSnapshot), options !== null && options !== void 0 ? options : {});\r\n    }\r\n    toFirestore(modelObject, options) {\r\n        if (!options) {\r\n            return this._delegate.toFirestore(modelObject);\r\n        }\r\n        else {\r\n            return this._delegate.toFirestore(modelObject, options);\r\n        }\r\n    }\r\n    // Use the same instance of `FirestoreDataConverter` for the given instances\r\n    // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will\r\n    // compare equal for two objects created with the same converter instance.\r\n    static getInstance(firestore, converter) {\r\n        const converterMapByFirestore = FirestoreDataConverter.INSTANCES;\r\n        let untypedConverterByConverter = converterMapByFirestore.get(firestore);\r\n        if (!untypedConverterByConverter) {\r\n            untypedConverterByConverter = new WeakMap();\r\n            converterMapByFirestore.set(firestore, untypedConverterByConverter);\r\n        }\r\n        let instance = untypedConverterByConverter.get(converter);\r\n        if (!instance) {\r\n            instance = new FirestoreDataConverter(firestore, new UserDataWriter(firestore), converter);\r\n            untypedConverterByConverter.set(converter, instance);\r\n        }\r\n        return instance;\r\n    }\r\n}\r\nFirestoreDataConverter.INSTANCES = new WeakMap();\r\n/**\r\n * A reference to a particular document in a collection in the database.\r\n */\r\nclass DocumentReference {\r\n    constructor(firestore, _delegate) {\r\n        this.firestore = firestore;\r\n        this._delegate = _delegate;\r\n        this._userDataWriter = new UserDataWriter(firestore);\r\n    }\r\n    static forPath(path, firestore, converter) {\r\n        if (path.length % 2 !== 0) {\r\n            throw new FirestoreError('invalid-argument', 'Invalid document reference. Document ' +\r\n                'references must have an even number of segments, but ' +\r\n                `${path.canonicalString()} has ${path.length}`);\r\n        }\r\n        return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, new _DocumentKey(path)));\r\n    }\r\n    static forKey(key, firestore, converter) {\r\n        return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, key));\r\n    }\r\n    get id() {\r\n        return this._delegate.id;\r\n    }\r\n    get parent() {\r\n        return new CollectionReference(this.firestore, this._delegate.parent);\r\n    }\r\n    get path() {\r\n        return this._delegate.path;\r\n    }\r\n    collection(pathString) {\r\n        try {\r\n            return new CollectionReference(this.firestore, collection(this._delegate, pathString));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'collection()', 'DocumentReference.collection()');\r\n        }\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof DocumentReference$1)) {\r\n            return false;\r\n        }\r\n        return refEqual(this._delegate, other);\r\n    }\r\n    set(value, options) {\r\n        options = validateSetOptions('DocumentReference.set', options);\r\n        try {\r\n            if (options) {\r\n                return setDoc(this._delegate, value, options);\r\n            }\r\n            else {\r\n                return setDoc(this._delegate, value);\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'setDoc()', 'DocumentReference.set()');\r\n        }\r\n    }\r\n    update(fieldOrUpdateData, value, ...moreFieldsAndValues) {\r\n        try {\r\n            if (arguments.length === 1) {\r\n                return updateDoc(this._delegate, fieldOrUpdateData);\r\n            }\r\n            else {\r\n                return updateDoc(this._delegate, fieldOrUpdateData, value, ...moreFieldsAndValues);\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'updateDoc()', 'DocumentReference.update()');\r\n        }\r\n    }\r\n    delete() {\r\n        return deleteDoc(this._delegate);\r\n    }\r\n    onSnapshot(...args) {\r\n        const options = extractSnapshotOptions(args);\r\n        const observer = wrapObserver(args, result => new DocumentSnapshot(this.firestore, new DocumentSnapshot$1(this.firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, this._delegate.converter)));\r\n        return onSnapshot(this._delegate, options, observer);\r\n    }\r\n    get(options) {\r\n        let snap;\r\n        if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\r\n            snap = getDocFromCache(this._delegate);\r\n        }\r\n        else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\r\n            snap = getDocFromServer(this._delegate);\r\n        }\r\n        else {\r\n            snap = getDoc(this._delegate);\r\n        }\r\n        return snap.then(result => new DocumentSnapshot(this.firestore, new DocumentSnapshot$1(this.firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, this._delegate.converter)));\r\n    }\r\n    withConverter(converter) {\r\n        return new DocumentReference(this.firestore, converter\r\n            ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter))\r\n            : this._delegate.withConverter(null));\r\n    }\r\n}\r\n/**\r\n * Replaces the function name in an error thrown by the firestore-exp API\r\n * with the function names used in the classic API.\r\n */\r\nfunction replaceFunctionName(e, original, updated) {\r\n    e.message = e.message.replace(original, updated);\r\n    return e;\r\n}\r\n/**\r\n * Iterates the list of arguments from an `onSnapshot` call and returns the\r\n * first argument that may be an `SnapshotListenOptions` object. Returns an\r\n * empty object if none is found.\r\n */\r\nfunction extractSnapshotOptions(args) {\r\n    for (const arg of args) {\r\n        if (typeof arg === 'object' && !isPartialObserver(arg)) {\r\n            return arg;\r\n        }\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * Creates an observer that can be passed to the firestore-exp SDK. The\r\n * observer converts all observed values into the format expected by the classic\r\n * SDK.\r\n *\r\n * @param args - The list of arguments from an `onSnapshot` call.\r\n * @param wrapper - The function that converts the firestore-exp type into the\r\n * type used by this shim.\r\n */\r\nfunction wrapObserver(args, wrapper) {\r\n    var _a, _b;\r\n    let userObserver;\r\n    if (isPartialObserver(args[0])) {\r\n        userObserver = args[0];\r\n    }\r\n    else if (isPartialObserver(args[1])) {\r\n        userObserver = args[1];\r\n    }\r\n    else if (typeof args[0] === 'function') {\r\n        userObserver = {\r\n            next: args[0],\r\n            error: args[1],\r\n            complete: args[2]\r\n        };\r\n    }\r\n    else {\r\n        userObserver = {\r\n            next: args[1],\r\n            error: args[2],\r\n            complete: args[3]\r\n        };\r\n    }\r\n    return {\r\n        next: val => {\r\n            if (userObserver.next) {\r\n                userObserver.next(wrapper(val));\r\n            }\r\n        },\r\n        error: (_a = userObserver.error) === null || _a === void 0 ? void 0 : _a.bind(userObserver),\r\n        complete: (_b = userObserver.complete) === null || _b === void 0 ? void 0 : _b.bind(userObserver)\r\n    };\r\n}\r\nclass DocumentSnapshot {\r\n    constructor(_firestore, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._delegate = _delegate;\r\n    }\r\n    get ref() {\r\n        return new DocumentReference(this._firestore, this._delegate.ref);\r\n    }\r\n    get id() {\r\n        return this._delegate.id;\r\n    }\r\n    get metadata() {\r\n        return this._delegate.metadata;\r\n    }\r\n    get exists() {\r\n        return this._delegate.exists();\r\n    }\r\n    data(options) {\r\n        return this._delegate.data(options);\r\n    }\r\n    get(fieldPath, options\r\n    // We are using `any` here to avoid an explicit cast by our users.\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    ) {\r\n        return this._delegate.get(fieldPath, options);\r\n    }\r\n    isEqual(other) {\r\n        return snapshotEqual(this._delegate, other._delegate);\r\n    }\r\n}\r\nclass QueryDocumentSnapshot extends DocumentSnapshot {\r\n    data(options) {\r\n        const data = this._delegate.data(options);\r\n        if (this._delegate._converter) {\r\n            // Undefined is a possible valid value from converter.\r\n            return data;\r\n        }\r\n        else {\r\n            _debugAssert(data !== undefined, 'Document in a QueryDocumentSnapshot should exist');\r\n            return data;\r\n        }\r\n    }\r\n}\r\nclass Query {\r\n    constructor(firestore, _delegate) {\r\n        this.firestore = firestore;\r\n        this._delegate = _delegate;\r\n        this._userDataWriter = new UserDataWriter(firestore);\r\n    }\r\n    where(fieldPath, opStr, value) {\r\n        try {\r\n            // The \"as string\" cast is a little bit of a hack. `where` accepts the\r\n            // FieldPath Compat type as input, but is not typed as such in order to\r\n            // not expose this via our public typings file.\r\n            return new Query(this.firestore, query(this._delegate, where(fieldPath, opStr, value)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\r\n        }\r\n    }\r\n    orderBy(fieldPath, directionStr) {\r\n        try {\r\n            // The \"as string\" cast is a little bit of a hack. `orderBy` accepts the\r\n            // FieldPath Compat type as input, but is not typed as such in order to\r\n            // not expose this via our public typings file.\r\n            return new Query(this.firestore, query(this._delegate, orderBy(fieldPath, directionStr)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\r\n        }\r\n    }\r\n    limit(n) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, limit(n)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'limit()', 'Query.limit()');\r\n        }\r\n    }\r\n    limitToLast(n) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, limitToLast(n)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'limitToLast()', 'Query.limitToLast()');\r\n        }\r\n    }\r\n    startAt(...args) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, startAt(...args)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'startAt()', 'Query.startAt()');\r\n        }\r\n    }\r\n    startAfter(...args) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, startAfter(...args)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'startAfter()', 'Query.startAfter()');\r\n        }\r\n    }\r\n    endBefore(...args) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, endBefore(...args)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'endBefore()', 'Query.endBefore()');\r\n        }\r\n    }\r\n    endAt(...args) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, endAt(...args)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'endAt()', 'Query.endAt()');\r\n        }\r\n    }\r\n    isEqual(other) {\r\n        return queryEqual(this._delegate, other._delegate);\r\n    }\r\n    get(options) {\r\n        let query;\r\n        if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\r\n            query = getDocsFromCache(this._delegate);\r\n        }\r\n        else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\r\n            query = getDocsFromServer(this._delegate);\r\n        }\r\n        else {\r\n            query = getDocs(this._delegate);\r\n        }\r\n        return query.then(result => new QuerySnapshot(this.firestore, new QuerySnapshot$1(this.firestore._delegate, this._userDataWriter, this._delegate, result._snapshot)));\r\n    }\r\n    onSnapshot(...args) {\r\n        const options = extractSnapshotOptions(args);\r\n        const observer = wrapObserver(args, snap => new QuerySnapshot(this.firestore, new QuerySnapshot$1(this.firestore._delegate, this._userDataWriter, this._delegate, snap._snapshot)));\r\n        return onSnapshot(this._delegate, options, observer);\r\n    }\r\n    withConverter(converter) {\r\n        return new Query(this.firestore, converter\r\n            ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter))\r\n            : this._delegate.withConverter(null));\r\n    }\r\n}\r\nclass DocumentChange {\r\n    constructor(_firestore, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._delegate = _delegate;\r\n    }\r\n    get type() {\r\n        return this._delegate.type;\r\n    }\r\n    get doc() {\r\n        return new QueryDocumentSnapshot(this._firestore, this._delegate.doc);\r\n    }\r\n    get oldIndex() {\r\n        return this._delegate.oldIndex;\r\n    }\r\n    get newIndex() {\r\n        return this._delegate.newIndex;\r\n    }\r\n}\r\nclass QuerySnapshot {\r\n    constructor(_firestore, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._delegate = _delegate;\r\n    }\r\n    get query() {\r\n        return new Query(this._firestore, this._delegate.query);\r\n    }\r\n    get metadata() {\r\n        return this._delegate.metadata;\r\n    }\r\n    get size() {\r\n        return this._delegate.size;\r\n    }\r\n    get empty() {\r\n        return this._delegate.empty;\r\n    }\r\n    get docs() {\r\n        return this._delegate.docs.map(doc => new QueryDocumentSnapshot(this._firestore, doc));\r\n    }\r\n    docChanges(options) {\r\n        return this._delegate\r\n            .docChanges(options)\r\n            .map(docChange => new DocumentChange(this._firestore, docChange));\r\n    }\r\n    forEach(callback, thisArg) {\r\n        this._delegate.forEach(snapshot => {\r\n            callback.call(thisArg, new QueryDocumentSnapshot(this._firestore, snapshot));\r\n        });\r\n    }\r\n    isEqual(other) {\r\n        return snapshotEqual(this._delegate, other._delegate);\r\n    }\r\n}\r\nclass CollectionReference extends Query {\r\n    constructor(firestore, _delegate) {\r\n        super(firestore, _delegate);\r\n        this.firestore = firestore;\r\n        this._delegate = _delegate;\r\n    }\r\n    get id() {\r\n        return this._delegate.id;\r\n    }\r\n    get path() {\r\n        return this._delegate.path;\r\n    }\r\n    get parent() {\r\n        const docRef = this._delegate.parent;\r\n        return docRef ? new DocumentReference(this.firestore, docRef) : null;\r\n    }\r\n    doc(documentPath) {\r\n        try {\r\n            if (documentPath === undefined) {\r\n                // Call `doc` without `documentPath` if `documentPath` is `undefined`\r\n                // as `doc` validates the number of arguments to prevent users from\r\n                // accidentally passing `undefined`.\r\n                return new DocumentReference(this.firestore, doc(this._delegate));\r\n            }\r\n            else {\r\n                return new DocumentReference(this.firestore, doc(this._delegate, documentPath));\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'doc()', 'CollectionReference.doc()');\r\n        }\r\n    }\r\n    add(data) {\r\n        return addDoc(this._delegate, data).then(docRef => new DocumentReference(this.firestore, docRef));\r\n    }\r\n    isEqual(other) {\r\n        return refEqual(this._delegate, other._delegate);\r\n    }\r\n    withConverter(converter) {\r\n        return new CollectionReference(this.firestore, converter\r\n            ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter))\r\n            : this._delegate.withConverter(null));\r\n    }\r\n}\r\nfunction castReference(documentRef) {\r\n    return _cast(documentRef, DocumentReference$1);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// The objects that are a part of this API are exposed to third-parties as\r\n// compiled javascript so we want to flag our private members with a leading\r\n// underscore to discourage their use.\r\n/**\r\n * A `FieldPath` refers to a field in a document. The path may consist of a\r\n * single field name (referring to a top-level field in the document), or a list\r\n * of field names (referring to a nested field in the document).\r\n */\r\nclass FieldPath {\r\n    /**\r\n     * Creates a FieldPath from the provided field names. If more than one field\r\n     * name is provided, the path will point to a nested field in a document.\r\n     *\r\n     * @param fieldNames - A list of field names.\r\n     */\r\n    constructor(...fieldNames) {\r\n        this._delegate = new FieldPath$1(...fieldNames);\r\n    }\r\n    static documentId() {\r\n        /**\r\n         * Internal Note: The backend doesn't technically support querying by\r\n         * document ID. Instead it queries by the entire document name (full path\r\n         * included), but in the cases we currently support documentId(), the net\r\n         * effect is the same.\r\n         */\r\n        return new FieldPath(_FieldPath.keyField().canonicalString());\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof FieldPath$1)) {\r\n            return false;\r\n        }\r\n        return this._delegate._internalPath.isEqual(other._internalPath);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FieldValue {\r\n    constructor(_delegate) {\r\n        this._delegate = _delegate;\r\n    }\r\n    static serverTimestamp() {\r\n        const delegate = serverTimestamp();\r\n        delegate._methodName = 'FieldValue.serverTimestamp';\r\n        return new FieldValue(delegate);\r\n    }\r\n    static delete() {\r\n        const delegate = deleteField();\r\n        delegate._methodName = 'FieldValue.delete';\r\n        return new FieldValue(delegate);\r\n    }\r\n    static arrayUnion(...elements) {\r\n        const delegate = arrayUnion(...elements);\r\n        delegate._methodName = 'FieldValue.arrayUnion';\r\n        return new FieldValue(delegate);\r\n    }\r\n    static arrayRemove(...elements) {\r\n        const delegate = arrayRemove(...elements);\r\n        delegate._methodName = 'FieldValue.arrayRemove';\r\n        return new FieldValue(delegate);\r\n    }\r\n    static increment(n) {\r\n        const delegate = increment(n);\r\n        delegate._methodName = 'FieldValue.increment';\r\n        return new FieldValue(delegate);\r\n    }\r\n    isEqual(other) {\r\n        return this._delegate.isEqual(other._delegate);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst firestoreNamespace = {\r\n    Firestore,\r\n    GeoPoint,\r\n    Timestamp,\r\n    Blob,\r\n    Transaction,\r\n    WriteBatch,\r\n    DocumentReference,\r\n    DocumentSnapshot,\r\n    Query,\r\n    QueryDocumentSnapshot,\r\n    QuerySnapshot,\r\n    CollectionReference,\r\n    FieldPath,\r\n    FieldValue,\r\n    setLogLevel,\r\n    CACHE_SIZE_UNLIMITED\r\n};\r\n/**\r\n * Configures Firestore as part of the Firebase SDK by calling registerComponent.\r\n *\r\n * @param firebase - The FirebaseNamespace to register Firestore with\r\n * @param firestoreFactory - A factory function that returns a new Firestore\r\n *    instance.\r\n */\r\nfunction configureForFirebase(firebase, firestoreFactory) {\r\n    firebase.INTERNAL.registerComponent(new Component('firestore-compat', container => {\r\n        const app = container.getProvider('app-compat').getImmediate();\r\n        const firestoreExp = container.getProvider('firestore').getImmediate();\r\n        return firestoreFactory(app, firestoreExp);\r\n    }, 'PUBLIC').setServiceProps(Object.assign({}, firestoreNamespace)));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Registers the main Firestore build with the components framework.\r\n * Persistence can be enabled via `firebase.firestore().enablePersistence()`.\r\n */\r\nfunction registerFirestore(instance) {\r\n    configureForFirebase(instance, (app, firestoreExp) => new Firestore(app, firestoreExp, new IndexedDbPersistenceProvider()));\r\n    instance.registerVersion(name, version);\r\n}\r\nregisterFirestore(firebase);\n\nexport { registerFirestore };\n\n"],
  "mappings": "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",
  "names": ["DocumentReference", "WriteBatch", "name", "setLogLevel", "DocumentSnapshot", "QueryDocumentSnapshot", "query", "QuerySnapshot", "doc", "FieldPath", "firebase"]
}
