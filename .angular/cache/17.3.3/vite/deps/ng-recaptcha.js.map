{
  "version": 3,
  "sources": ["../../../../../node_modules/ng-recaptcha/fesm2022/ng-recaptcha.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, EventEmitter, Component, Input, HostBinding, Output, NgModule, forwardRef, Directive, HostListener } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { of, BehaviorSubject, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\n\n/** @deprecated Use `LOADER_OPTIONS` instead. See `RecaptchaLoaderOptions.onBeforeLoad` */\nconst RECAPTCHA_LANGUAGE = new InjectionToken(\"recaptcha-language\");\n/** @deprecated Use `LOADER_OPTIONS` instead. See `RecaptchaLoaderOptions.onBeforeLoad` */\nconst RECAPTCHA_BASE_URL = new InjectionToken(\"recaptcha-base-url\");\n/** @deprecated Use `LOADER_OPTIONS` instead. See `RecaptchaLoaderOptions.onBeforeLoad` */\nconst RECAPTCHA_NONCE = new InjectionToken(\"recaptcha-nonce-tag\");\nconst RECAPTCHA_SETTINGS = new InjectionToken(\"recaptcha-settings\");\nconst RECAPTCHA_V3_SITE_KEY = new InjectionToken(\"recaptcha-v3-site-key\");\n/**\n * See the documentation for `RecaptchaLoaderOptions`.\n */\nconst RECAPTCHA_LOADER_OPTIONS = new InjectionToken(\"recaptcha-loader-options\");\nfunction loadScript(renderMode, onBeforeLoad, onLoaded, {\n  url,\n  lang,\n  nonce\n} = {}) {\n  window.ng2recaptchaloaded = () => {\n    onLoaded(grecaptcha);\n  };\n  const script = document.createElement(\"script\");\n  script.innerHTML = \"\";\n  const {\n    url: baseUrl,\n    nonce: onBeforeLoadNonce\n  } = onBeforeLoad(new URL(url || \"https://www.google.com/recaptcha/api.js\"));\n  baseUrl.searchParams.set(\"render\", renderMode === \"explicit\" ? renderMode : renderMode.key);\n  baseUrl.searchParams.set(\"onload\", \"ng2recaptchaloaded\");\n  baseUrl.searchParams.set(\"trustedtypes\", \"true\");\n  if (lang) {\n    baseUrl.searchParams.set(\"hl\", lang);\n  }\n  script.src = baseUrl.href;\n  const nonceValue = onBeforeLoadNonce || nonce;\n  if (nonceValue) {\n    script.setAttribute(\"nonce\", nonceValue);\n  }\n  script.async = true;\n  script.defer = true;\n  document.head.appendChild(script);\n}\nfunction newLoadScript({\n  v3SiteKey,\n  onBeforeLoad,\n  onLoaded\n}) {\n  const renderMode = v3SiteKey ? {\n    key: v3SiteKey\n  } : \"explicit\";\n  loader.loadScript(renderMode, onBeforeLoad, onLoaded);\n}\nconst loader = {\n  loadScript,\n  newLoadScript\n};\nfunction toNonNullObservable(subject) {\n  return subject.asObservable().pipe(filter(value => value !== null));\n}\nclass RecaptchaLoaderService {\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static {\n    this.ready = null;\n  }\n  constructor(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  platformId,\n  // eslint-disable-next-line deprecation/deprecation\n  language,\n  // eslint-disable-next-line deprecation/deprecation\n  baseUrl,\n  // eslint-disable-next-line deprecation/deprecation\n  nonce, v3SiteKey, options) {\n    this.platformId = platformId;\n    this.language = language;\n    this.baseUrl = baseUrl;\n    this.nonce = nonce;\n    this.v3SiteKey = v3SiteKey;\n    this.options = options;\n    const subject = this.init();\n    this.ready = subject ? toNonNullObservable(subject) : of();\n  }\n  /** @internal */\n  init() {\n    if (RecaptchaLoaderService.ready) {\n      return RecaptchaLoaderService.ready;\n    }\n    if (!isPlatformBrowser(this.platformId)) {\n      return undefined;\n    }\n    const subject = new BehaviorSubject(null);\n    RecaptchaLoaderService.ready = subject;\n    loader.newLoadScript({\n      v3SiteKey: this.v3SiteKey,\n      onBeforeLoad: url => {\n        if (this.options?.onBeforeLoad) {\n          return this.options.onBeforeLoad(url);\n        }\n        const newUrl = new URL(this.baseUrl ?? url);\n        if (this.language) {\n          newUrl.searchParams.set(\"hl\", this.language);\n        }\n        return {\n          url: newUrl,\n          nonce: this.nonce\n        };\n      },\n      onLoaded: recaptcha => {\n        let value = recaptcha;\n        if (this.options?.onLoaded) {\n          value = this.options.onLoaded(recaptcha);\n        }\n        subject.next(value);\n      }\n    });\n    return subject;\n  }\n  static {\n    this.ɵfac = function RecaptchaLoaderService_Factory(t) {\n      return new (t || RecaptchaLoaderService)(i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(RECAPTCHA_LANGUAGE, 8), i0.ɵɵinject(RECAPTCHA_BASE_URL, 8), i0.ɵɵinject(RECAPTCHA_NONCE, 8), i0.ɵɵinject(RECAPTCHA_V3_SITE_KEY, 8), i0.ɵɵinject(RECAPTCHA_LOADER_OPTIONS, 8));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: RecaptchaLoaderService,\n      factory: RecaptchaLoaderService.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaLoaderService, [{\n    type: Injectable\n  }], () => [{\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_LANGUAGE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_BASE_URL]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_NONCE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_V3_SITE_KEY]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_LOADER_OPTIONS]\n    }]\n  }], null);\n})();\nlet nextId = 0;\nclass RecaptchaComponent {\n  constructor(elementRef, loader, zone, settings) {\n    this.elementRef = elementRef;\n    this.loader = loader;\n    this.zone = zone;\n    this.id = `ngrecaptcha-${nextId++}`;\n    this.errorMode = \"default\";\n    this.resolved = new EventEmitter();\n    /**\n     * @deprecated `(error) output will be removed in the next major version. Use (errored) instead\n     */\n    // eslint-disable-next-line @angular-eslint/no-output-native\n    this.error = new EventEmitter();\n    this.errored = new EventEmitter();\n    if (settings) {\n      this.siteKey = settings.siteKey;\n      this.theme = settings.theme;\n      this.type = settings.type;\n      this.size = settings.size;\n      this.badge = settings.badge;\n    }\n  }\n  ngAfterViewInit() {\n    this.subscription = this.loader.ready.subscribe(grecaptcha => {\n      if (grecaptcha != null && grecaptcha.render instanceof Function) {\n        this.grecaptcha = grecaptcha;\n        this.renderRecaptcha();\n      }\n    });\n  }\n  ngOnDestroy() {\n    // reset the captcha to ensure it does not leave anything behind\n    // after the component is no longer needed\n    this.grecaptchaReset();\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  /**\n   * Executes the invisible recaptcha.\n   * Does nothing if component's size is not set to \"invisible\".\n   */\n  execute() {\n    if (this.size !== \"invisible\") {\n      return;\n    }\n    if (this.widget != null) {\n      void this.grecaptcha.execute(this.widget);\n    } else {\n      // delay execution of recaptcha until it actually renders\n      this.executeRequested = true;\n    }\n  }\n  reset() {\n    if (this.widget != null) {\n      if (this.grecaptcha.getResponse(this.widget)) {\n        // Only emit an event in case if something would actually change.\n        // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n        // on a non-resolved captcha.\n        this.resolved.emit(null);\n      }\n      this.grecaptchaReset();\n    }\n  }\n  /**\n   * ⚠️ Warning! Use this property at your own risk!\n   *\n   * While this member is `public`, it is not a part of the component's public API.\n   * The semantic versioning guarantees _will not be honored_! Thus, you might find that this property behavior changes in incompatible ways in minor or even patch releases.\n   * You are **strongly advised** against using this property.\n   * Instead, use more idiomatic ways to get reCAPTCHA value, such as `resolved` EventEmitter, or form-bound methods (ngModel, formControl, and the likes).å\n   */\n  get __unsafe_widgetValue() {\n    return this.widget != null ? this.grecaptcha.getResponse(this.widget) : null;\n  }\n  /** @internal */\n  expired() {\n    this.resolved.emit(null);\n  }\n  /** @internal */\n  onError(args) {\n    // eslint-disable-next-line deprecation/deprecation\n    this.error.emit(args);\n    this.errored.emit(args);\n  }\n  /** @internal */\n  captchaResponseCallback(response) {\n    this.resolved.emit(response);\n  }\n  /** @internal */\n  grecaptchaReset() {\n    if (this.widget != null) {\n      this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));\n    }\n  }\n  /** @internal */\n  renderRecaptcha() {\n    // This `any` can be removed after @types/grecaptcha get updated\n    const renderOptions = {\n      badge: this.badge,\n      callback: response => {\n        this.zone.run(() => this.captchaResponseCallback(response));\n      },\n      \"expired-callback\": () => {\n        this.zone.run(() => this.expired());\n      },\n      sitekey: this.siteKey,\n      size: this.size,\n      tabindex: this.tabIndex,\n      theme: this.theme,\n      type: this.type\n    };\n    if (this.errorMode === \"handled\") {\n      renderOptions[\"error-callback\"] = (...args) => {\n        this.zone.run(() => this.onError(args));\n      };\n    }\n    this.widget = this.grecaptcha.render(this.elementRef.nativeElement, renderOptions);\n    if (this.executeRequested === true) {\n      this.executeRequested = false;\n      this.execute();\n    }\n  }\n  static {\n    this.ɵfac = function RecaptchaComponent_Factory(t) {\n      return new (t || RecaptchaComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(RecaptchaLoaderService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(RECAPTCHA_SETTINGS, 8));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: RecaptchaComponent,\n      selectors: [[\"re-captcha\"]],\n      hostVars: 1,\n      hostBindings: function RecaptchaComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"id\", ctx.id);\n        }\n      },\n      inputs: {\n        id: \"id\",\n        siteKey: \"siteKey\",\n        theme: \"theme\",\n        type: \"type\",\n        size: \"size\",\n        tabIndex: \"tabIndex\",\n        badge: \"badge\",\n        errorMode: \"errorMode\"\n      },\n      outputs: {\n        resolved: \"resolved\",\n        error: \"error\",\n        errored: \"errored\"\n      },\n      exportAs: [\"reCaptcha\"],\n      decls: 0,\n      vars: 0,\n      template: function RecaptchaComponent_Template(rf, ctx) {},\n      encapsulation: 2\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaComponent, [{\n    type: Component,\n    args: [{\n      exportAs: \"reCaptcha\",\n      selector: \"re-captcha\",\n      template: ``\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: RecaptchaLoaderService\n  }, {\n    type: i0.NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_SETTINGS]\n    }]\n  }], {\n    id: [{\n      type: Input\n    }, {\n      type: HostBinding,\n      args: [\"attr.id\"]\n    }],\n    siteKey: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    badge: [{\n      type: Input\n    }],\n    errorMode: [{\n      type: Input\n    }],\n    resolved: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }],\n    errored: [{\n      type: Output\n    }]\n  });\n})();\nclass RecaptchaCommonModule {\n  static {\n    this.ɵfac = function RecaptchaCommonModule_Factory(t) {\n      return new (t || RecaptchaCommonModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: RecaptchaCommonModule,\n      declarations: [RecaptchaComponent],\n      exports: [RecaptchaComponent]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaCommonModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RecaptchaComponent],\n      exports: [RecaptchaComponent]\n    }]\n  }], null, null);\n})();\nclass RecaptchaModule {\n  static {\n    this.ɵfac = function RecaptchaModule_Factory(t) {\n      return new (t || RecaptchaModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: RecaptchaModule,\n      imports: [RecaptchaCommonModule],\n      exports: [RecaptchaComponent]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [RecaptchaLoaderService],\n      imports: [RecaptchaCommonModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaModule, [{\n    type: NgModule,\n    args: [{\n      exports: [RecaptchaComponent],\n      imports: [RecaptchaCommonModule],\n      providers: [RecaptchaLoaderService]\n    }]\n  }], null, null);\n})();\n\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\nclass ReCaptchaV3Service {\n  constructor(zone, recaptchaLoader, siteKey) {\n    this.recaptchaLoader = recaptchaLoader;\n    this.zone = zone;\n    this.siteKey = siteKey;\n    this.init();\n  }\n  get onExecute() {\n    if (!this.onExecuteSubject) {\n      this.onExecuteSubject = new Subject();\n      this.onExecuteObservable = this.onExecuteSubject.asObservable();\n    }\n    return this.onExecuteObservable;\n  }\n  get onExecuteError() {\n    if (!this.onExecuteErrorSubject) {\n      this.onExecuteErrorSubject = new Subject();\n      this.onExecuteErrorObservable = this.onExecuteErrorSubject.asObservable();\n    }\n    return this.onExecuteErrorObservable;\n  }\n  /**\n   * Executes the provided `action` with reCAPTCHA v3 API.\n   * Use the emitted token value for verification purposes on the backend.\n   *\n   * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n   * https://developers.google.com/recaptcha/docs/v3.\n   *\n   * @param {string} action the action to execute\n   * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n   * The returned `Observable` completes immediately after emitting a value.\n   */\n  execute(action) {\n    const subject = new Subject();\n    if (!this.grecaptcha) {\n      if (!this.actionBacklog) {\n        this.actionBacklog = [];\n      }\n      this.actionBacklog.push([action, subject]);\n    } else {\n      this.executeActionWithSubject(action, subject);\n    }\n    return subject.asObservable();\n  }\n  /** @internal */\n  executeActionWithSubject(action, subject) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const onError = error => {\n      this.zone.run(() => {\n        subject.error(error);\n        if (this.onExecuteErrorSubject) {\n          // We don't know any better at this point, unfortunately, so have to resort to `any`\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          this.onExecuteErrorSubject.next({\n            action,\n            error\n          });\n        }\n      });\n    };\n    this.zone.runOutsideAngular(() => {\n      try {\n        this.grecaptcha.execute(this.siteKey, {\n          action\n        }).then(token => {\n          this.zone.run(() => {\n            subject.next(token);\n            subject.complete();\n            if (this.onExecuteSubject) {\n              this.onExecuteSubject.next({\n                action,\n                token\n              });\n            }\n          });\n        }, onError);\n      } catch (e) {\n        onError(e);\n      }\n    });\n  }\n  /** @internal */\n  init() {\n    this.recaptchaLoader.ready.subscribe(value => {\n      this.grecaptcha = value;\n      if (this.actionBacklog && this.actionBacklog.length > 0) {\n        this.actionBacklog.forEach(([action, subject]) => this.executeActionWithSubject(action, subject));\n        this.actionBacklog = undefined;\n      }\n    });\n  }\n  static {\n    this.ɵfac = function ReCaptchaV3Service_Factory(t) {\n      return new (t || ReCaptchaV3Service)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(RecaptchaLoaderService), i0.ɵɵinject(RECAPTCHA_V3_SITE_KEY));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: ReCaptchaV3Service,\n      factory: ReCaptchaV3Service.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ReCaptchaV3Service, [{\n    type: Injectable\n  }], () => [{\n    type: i0.NgZone\n  }, {\n    type: RecaptchaLoaderService\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [RECAPTCHA_V3_SITE_KEY]\n    }]\n  }], null);\n})();\nclass RecaptchaV3Module {\n  static {\n    this.ɵfac = function RecaptchaV3Module_Factory(t) {\n      return new (t || RecaptchaV3Module)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: RecaptchaV3Module\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [ReCaptchaV3Service, RecaptchaLoaderService]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaV3Module, [{\n    type: NgModule,\n    args: [{\n      providers: [ReCaptchaV3Service, RecaptchaLoaderService]\n    }]\n  }], null, null);\n})();\nclass RecaptchaValueAccessorDirective {\n  constructor(host) {\n    this.host = host;\n    this.requiresControllerReset = false;\n  }\n  writeValue(value) {\n    if (!value) {\n      this.host.reset();\n    } else {\n      // In this case, it is most likely that a form controller has requested to write a specific value into the component.\n      // This isn't really a supported case - reCAPTCHA values are single-use, and, in a sense, readonly.\n      // What this means is that the form controller has recaptcha control state of X, while reCAPTCHA itself can't \"restore\"\n      // to that state. In order to make form controller aware of this discrepancy, and to fix the said misalignment,\n      // we'll be telling the controller to \"reset\" the value back to null.\n      if (this.host.__unsafe_widgetValue !== value && Boolean(this.host.__unsafe_widgetValue) === false) {\n        this.requiresControllerReset = true;\n      }\n    }\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n    if (this.requiresControllerReset) {\n      this.requiresControllerReset = false;\n      this.onChange(null);\n    }\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  onResolve($event) {\n    if (this.onChange) {\n      this.onChange($event);\n    }\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n  static {\n    this.ɵfac = function RecaptchaValueAccessorDirective_Factory(t) {\n      return new (t || RecaptchaValueAccessorDirective)(i0.ɵɵdirectiveInject(RecaptchaComponent));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: RecaptchaValueAccessorDirective,\n      selectors: [[\"re-captcha\", \"formControlName\", \"\"], [\"re-captcha\", \"formControl\", \"\"], [\"re-captcha\", \"ngModel\", \"\"]],\n      hostBindings: function RecaptchaValueAccessorDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"resolved\", function RecaptchaValueAccessorDirective_resolved_HostBindingHandler($event) {\n            return ctx.onResolve($event);\n          });\n        }\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        multi: true,\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => RecaptchaValueAccessorDirective)\n      }])]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaValueAccessorDirective, [{\n    type: Directive,\n    args: [{\n      providers: [{\n        multi: true,\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => RecaptchaValueAccessorDirective)\n      }],\n      selector: \"re-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]\"\n    }]\n  }], () => [{\n    type: RecaptchaComponent\n  }], {\n    onResolve: [{\n      type: HostListener,\n      args: [\"resolved\", [\"$event\"]]\n    }]\n  });\n})();\nclass RecaptchaFormsModule {\n  static {\n    this.ɵfac = function RecaptchaFormsModule_Factory(t) {\n      return new (t || RecaptchaFormsModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: RecaptchaFormsModule,\n      declarations: [RecaptchaValueAccessorDirective],\n      imports: [FormsModule, RecaptchaCommonModule],\n      exports: [RecaptchaValueAccessorDirective]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [FormsModule, RecaptchaCommonModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaFormsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RecaptchaValueAccessorDirective],\n      exports: [RecaptchaValueAccessorDirective],\n      imports: [FormsModule, RecaptchaCommonModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_LOADER_OPTIONS, RECAPTCHA_NONCE, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaComponent, RecaptchaFormsModule, RecaptchaLoaderService, RecaptchaModule, RecaptchaV3Module, RecaptchaValueAccessorDirective };\n"],
  "mappings": "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",
  "names": ["loader", "grecaptcha"]
}
